#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# Description: Build Kernel using GitHub Actions
# Change from P3TERX
#

name: Centos Kernel XANMOD STABLE

on:
  repository_dispatch:
  workflow_dispatch:
   # inputs:
     # ssh:
       # description: 'SSH connection to Actions'
       # required: false
       # default: 'false'

env:
  UPLOAD_DIR: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    container: docker.io/centos:7
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: intall deps
      run: |
        yum update -y
        yum install epel-release -y && yum install ansible -y && yum install openssh-clients -y
        yum install -y wget tar gcc automake autoconf libtool make zip unzip centos-release-scl scl-utils bzip2 wget curl jq htop sudo time patch
        yum groups install development -y
        yum install gcc bc ncurses-devel openssl-devel elfutils-libelf-devel rsync glibc-static tmux -y
        mkdir /github/home/.ssh/ && mkdir /workdir
        
    - name: Compile GCC 10.3
      id: gcc
      continue-on-error: true
      run: |
        cd /workdir
        wget https://ftp.gnu.org/gnu/make/make-4.3.tar.gz
        tar zxvf make-4.3.tar.gz && cd make-4.3
        ./configure
        make -j 2 && make install
        ln -s -f /usr/local/bin/make /usr/bin/make
        cd /workdir
        wget https://www.cpan.org/src/5.0/perl-5.32.0.tar.xz
        tar xvf perl-5.32.0.tar.xz && cd perl-5.32.0
        ./Configure -des -Dprefix=/usr/local/
        make -j 2 && make install
        ln -s -f /usr/local/bin/perl /usr/bin/perl
        cd /workdir
        wget https://ftp.gnu.org/gnu/texinfo/texinfo-6.7.tar.xz
        tar xvf texinfo-6.7.tar.xz && cd texinfo-6.7
        ./configure
        make -j 2 && make install
        cd /workdir
        wget https://www.python.org/ftp/python/3.9.4/Python-3.9.4.tar.xz
        tar xvf Python-3.9.4.tar.xz && cd Python-3.9.4
        ./configure
        make -j 2 && make install
        cd /workdir
        wget https://ftp.gnu.org/gnu/gcc/gcc-10.3.0/gcc-10.3.0.tar.xz
        tar xvf gcc-10.3.0.tar.xz && cd gcc-10.3.0
        ./contrib/download_prerequisites
        mkdir build && cd build
        ../configure --prefix=/usr/local/gcc-10.3.0/ --enable-checking=release --enable-languages=c,c++ --disable-multilib --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
        time make -j 2
        make install
        mv /usr/bin/gcc /usr/bin/gcc-4.8
        mv /usr/bin/g++ /usr/bin/g++-4.8
        ln -s /usr/local/gcc-10.3.0/bin/gcc /usr/bin/gcc
        ln -s /usr/local/gcc-10.3.0/bin/g++ /usr/bin/g++
        mv /usr/lib64/libstdc++.so.6 /usr/lib64/libstdc++.so.6.bak
        ln -s /usr/local/gcc-10.3.0/lib64/libstdc++.so.6 /usr/lib64/libstdc++.so.6
        cd /workdir
        wget https://ftp.gnu.org/gnu/binutils/binutils-2.36.tar.xz
        tar xvf binutils-2.36.tar.xz && cd binutils-2.36
        ./configure --prefix=/usr
        time make -j 2 && make install
        cd /workdir
        wget https://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz
        tar xvf m4-1.4.18.tar.xz && cd m4-1.4.18
        ./configure
        time make -j 2 && make install
        cd /workdir
        wget https://ftp.gnu.org/gnu/bison/bison-3.7.6.tar.xz
        tar xvf bison-3.7.6.tar.xz && cd bison-3.7.6
        ./configure
        time make -j 2 && make install
        cd /workdir
        wget https://ftp.gnu.org/gnu/glibc/glibc-2.33.tar.xz
        tar xvf glibc-2.33.tar.xz && cd glibc-2.33
        mkdir build && cd build
        ../configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin --disable-sanity-checks --disable-werror
        make -j 2
        make install
        echo "::set-output name=status::success"

    - name: Get source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        xanmod_stable=$(curl -s https://sourceforge.net/projects/xanmod/files/releases/stable/ | grep 'class="folder ">' | head -n 1 | awk -F '"' '{print $2}')
        xanmod_stable_ver=$(curl -s https://sourceforge.net/projects/xanmod/files/releases/stable/ | grep 'class="folder ">' | head -n 1 | awk -F '"' '{print $2}' | awk -F '[-]' '{print $1}')
        kernel_file=https://github.com/xanmod/linux/archive/refs/tags/$xanmod_stable.zip
        wget $kernel_file && unzip $xanmod_stable.zip -d /workdir
        
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}         

    - name: Compile the kernel
      id: compile
      working-directory: /workdir
      run: |
        xanmod_stable_ver=$(curl -s https://sourceforge.net/projects/xanmod/files/releases/stable/ | grep 'class="folder ">' | head -n 1 | awk -F '"' '{print $2}' | awk -F '[-]' '{print $1}')
        xanmod_stable=$(curl -s https://sourceforge.net/projects/xanmod/files/releases/stable/ | grep 'class="folder ">' | head -n 1 | awk -F '"' '{print $2}')
        cd linux-$xanmod_stable
        #rm -rf .config
        #wget -O .config https://raw.githubusercontent.com/ylx2016/kernel/master/config-5.11.13-xanmod1-stable
        #sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=""/g' .config && scripts/config --disable MODULE_SIG && scripts/config --disable DEBUG_INFO
        echo -e "$(nproc) thread compile"
        
        sudo time make -j$(nproc) rpm-pkg
        mv /root/rpmbuild/RPMS/* /workdir/upload
        echo "::set-output name=status::success"
        echo "FILE_DATE=Kernel_Centos_$xanmod_stable$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_DIR == 'true'
      with:
        name: ${{ env.FILE_DATE }}
        path: /workdir/upload

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        xanmod_stable=$(curl -s https://sourceforge.net/projects/xanmod/files/releases/stable/ | grep 'class="folder ">' | head -n 1 | awk -F '"' '{print $2}')
        echo "::set-output name=release_tag::Centos_Kernel_${xanmod_stable}_latest_$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "for centos 7" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload kernel to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /workdir/upload/*

    #- name: Delete workflow runs
    #  uses: GitRML/delete-workflow-runs@main
    #  with:
    #    retain_days: 1
    #    keep_minimum_runs: 3
